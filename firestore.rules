rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Video/Audio Meeting Integration: Calls collection
    match /calls/{callId} {
      // Allow read/write for authenticated users (members of the call)
      allow read, write: if isSignedIn();
      // Only admins or the creator can delete
      allow delete: if isAdmin() || resource.data.createdBy == request.auth.uid;
    }

    // Allow call-related messages in spaces
    match /spaces/{spaceId}/messages/{messageId} {
      allow read, write: if isSignedIn();
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Storage metadata is managed via Firebase Storage rules; ensure Firestore message docs are allowed above.
    
    function isUser(userId) {
        return request.auth.uid == userId;
    }
    
    function isSignedIn() {
        return request.auth != null;
    }
    
    // In development, set this to true. In production, set to false.
    function isDevelopment() {
        return false; // Set to false for production security rules
    }
    
    // Check if user is in a team
    function isTeamMember(teamName) {
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userData.teams is list && teamName in userData.teams;
    }

    // Admins can read all user data and update roles.
    // Users can read public profiles and manage their own data.
    match /users/{userId} {
      // Allow users to read their own data or admins to read any user data
      allow read: if isUser(userId) || isAdmin() || isDevelopment();
      
      // Allow users to update only their own data (except role field)
      allow update: if (isUser(userId) && 
          !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])) || 
          isAdmin() || 
          isDevelopment();
      
      // Only admins can create or delete user documents
      allow create, delete: if isAdmin() || isDevelopment();
      
      // Only admins can list all users
      allow list: if isAdmin() || isDevelopment();

      // Notifications are private to each user
      match /notifications/{notificationId} {
        allow read, update, delete: if isUser(userId);
        // Any signed-in user can create a notification for the owner
        allow create: if isSignedIn();
      }
    }

    // Company profile is readable by all authenticated users, writable only by admins.
      // JIRA-like collections
      match /issues/{issueId} {
        allow read: if isSignedIn() || isDevelopment();
        allow create: if isSignedIn() || isDevelopment();
        allow update, delete: if isAdmin() || isUser(resource.data.reporter) || isDevelopment();
      }

      match /projects/{projectId} {
        allow read: if isSignedIn() || isDevelopment();
        allow create: if isAdmin() || isDevelopment();
        // Project owner or admin can update/delete projects
        allow update, delete: if isAdmin() || isUser(resource.data.owner) || isDevelopment();
      }
      
      // Teams collection for managing teams
      match /teams/{teamId} {
        // All signed-in users can read teams
        allow read: if isSignedIn() || isDevelopment();
        // Only admins can create, update, and delete teams
        allow create, update, delete: if isAdmin() || isDevelopment();
        // Users assigned to a team can read their team details
        allow list: if isSignedIn() && 
          (isTeamMember(resource.data.name) || isAdmin() || isDevelopment());
      }

      match /boards/{boardId} {
        allow read: if isSignedIn() || isDevelopment();
        allow create: if isAdmin() || isDevelopment();
        allow update, delete: if isAdmin() || isDevelopment();
      }

      match /comments/{commentId} {
        allow read: if isSignedIn() || isDevelopment();
        allow create: if isSignedIn() || isDevelopment();
        allow update, delete: if isUser(resource.data.author) || isAdmin() || isDevelopment();
      }

      match /attachments/{attachmentId} {
        allow read: if isSignedIn() || isDevelopment();
        allow create: if isSignedIn() || isDevelopment();
        allow update, delete: if isUser(resource.data.uploadedBy) || isAdmin() || isDevelopment();
      }

      match /workflows/{workflowId} {
        allow read: if isSignedIn() || isDevelopment();
        allow create, update, delete: if isAdmin() || isDevelopment();
      }
    match /companyProfile/main {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

    // Spaces access: members can list/read/update; only admins can create/delete.
    match /spaces/{spaceId} {
      allow read, list, write: if isSignedIn() || isDevelopment();
      allow create, delete: if isAdmin() || isDevelopment();
      
      match /messages/{messageId} {
        allow read, write: if isDevelopment() || (
          isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.members
        );
      }
    }
    
    // Connect channels are readable by members, writable by the creator.
     match /connect_channels/{channelId} {
      allow read, update: if resource.data.members.hasAny([request.auth.uid]);
      allow create: if isSignedIn();
    }
    
    // Conversations are private between two users.
    match /conversations/{conversationId} {
        allow read, write: if request.auth.uid in conversationId.split('_');

        match /messages/{messageId} {
            allow read, write: if request.auth.uid in conversationId.split('_');
        }
    }

    // Tasks are readable and writable by any authenticated user.
    match /tasks/{taskId} {
      allow read, write, delete: if isSignedIn();
    }
    
    // Invites: creators can create; invited users can read their own invites
    match /invites/{inviteId} {
      allow create: if isSignedIn();
      allow read, list: if isSignedIn() && resource.data.invitedEmail == request.auth.token.email;
    }
    
    // The shared whiteboard is accessible to any authenticated user.
    match /whiteboard/shared {
      allow read, write: if request.auth != null;
    }
    
    // User-specific whiteboards
    match /whiteboard/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
    }

    // Meetings: attendees can read, creators can update/delete, admins can delete any
    match /meetings/{meetingId} {
      allow read, write, list: if isSignedIn() || isDevelopment();
      allow create, delete: if isSignedIn() || isDevelopment();
    }
    
    // Personal Tasks: users can only access their own tasks
    match /personalTasks/{taskId} {
      allow read, update, delete: if isUser(resource.data.userId) || isAdmin() || isDevelopment();
      allow create: if isUser(request.resource.data.userId) || isAdmin() || isDevelopment();
      allow list: if isSignedIn() && request.query.limit <= 100;
    }
    
    // Announcements: only admins can create, users can read announcements addressed to them
    match /announcements/{announcementId} {
      // Allow users to read announcements that include them in recipients
      allow read: if isSignedIn() && 
        (resource.data.recipients.hasAny([request.auth.uid]) || isAdmin());
      
      // Only admins can create, update, or delete announcements
      allow create, update, delete: if isAdmin() || isDevelopment();
      
      // Only admins can list all announcements
      allow list: if isAdmin() || isDevelopment();
    }

  }
}